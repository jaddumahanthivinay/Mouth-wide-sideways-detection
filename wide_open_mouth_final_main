{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PFneznxqE-pJ"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import dlib\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "datFile =  \"/Users/umadevipotnuru/PycharmProjects/pythonProject2/shape_predictor_68_face_landmarks.dat\"\n",
        "predictor = dlib.shape_predictor(datFile)\n",
        "detector = dlib.get_frontal_face_detector()\n",
        "\n",
        "#getting facial landmarks\n",
        "def get_landmark(im):\n",
        "    rects = detector(im, 1)\n",
        "    if len(rects) > 1:\n",
        "        return \"error\"\n",
        "    if len(rects) == 0:\n",
        "        return \"error\"\n",
        "    return np.matrix([[p.x, p.y] for p in predictor(im, rects[0]).parts()])\n",
        "\n",
        "#annotating facial landmarks\n",
        "def landmark_annotate(im, landmarks):\n",
        "    im = im.copy()\n",
        "    for idx, point in enumerate(landmarks):\n",
        "        pos = (point[0,0], point[0,1])\n",
        "        cv2.putText(im, str(idx), pos, fontFace = cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, fontScale = 0.4, color = (1,2,255))\n",
        "        cv2.circle(im, pos, 3, color = (0,2,2))\n",
        "    return im\n",
        "\n",
        "#getting edges of lips\n",
        "def get_left_lip_edge(landmarks):\n",
        "    left_lip_edge = []\n",
        "    left_lip_edge.append(landmarks[61])\n",
        "    left_lip_point = np.squeeze(np.asarray(left_lip_edge))\n",
        "    return int(left_lip_point[0])\n",
        "\n",
        "def get_right_lip_edge(landmarks):\n",
        "    right_lip_edge = []\n",
        "    right_lip_edge.append(landmarks[65])\n",
        "    right_lip_point = np.squeeze(np.asarray(right_lip_edge))\n",
        "    return int(right_lip_point[0])\n",
        "\n",
        "#calculating distance between edges\n",
        "def get_lip_distance(image):\n",
        "    landmarks = get_landmark(image)\n",
        "    if landmarks == \"error\":\n",
        "        return image, 0\n",
        "    image_with_landmarks = landmark_annotate(image, landmarks)\n",
        "    left_edge = get_left_lip_edge(landmarks)\n",
        "    right_edge = get_right_lip_edge(landmarks)\n",
        "    lip_distance = abs(right_edge - left_edge)\n",
        "    return image_with_landmarks, lip_distance\n",
        "\n",
        "#live video capture, lip distance calculation and detecting wideness\n",
        "cap = cv2.VideoCapture(0)\n",
        "wide_mouth = 0\n",
        "wide_mouth_status = False\n",
        "while True:\n",
        "    ret, frame = cap.read()\n",
        "    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
        "    image_landmarks, lip_distance = get_lip_distance(gray)\n",
        "    previous_wide_mouth_status = wide_mouth_status\n",
        "    if lip_distance > 25:\n",
        "        wide_mouth_status = True\n",
        "        cv2.putText(gray, \"mouth wide open\", (50, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)\n",
        "        wide_mouth_count = \"wide mouth count\" + str(wide_mouth + 1)\n",
        "        cv2.putText(gray, wide_mouth_count, (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 127), 2)\n",
        "    else:\n",
        "        wide_mouth_status = False\n",
        "    if previous_wide_mouth_status == True and wide_mouth_status == False:\n",
        "        wide_mouth += 1\n",
        "    cv2.imshow('live edges', image_landmarks)\n",
        "    cv2.imshow('mouth wide open detection', gray)\n",
        "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
        "        break\n",
        "cap.release()\n",
        "cv2.destroyAllWindows()"
      ]
    }
  ]
}